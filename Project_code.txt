#include <Wire.h>
#include <IRLibRecvPCI.h> 
#include <IRremote.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <Adafruit_Sensor.h>
#include <DHT.h>
#define DHTPIN 30
#define DHTTYPE DHT22
#define IR_LED_PIN 9 
#define SCREEN_WIDTH 128  // OLED display width, in pixels
#define SCREEN_HEIGHT 64  // OLED display height, in pixels
#define BLUE 0x001F
#define OLED_RESET 4
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT); 
DHT dht(DHTPIN, DHTTYPE);
IRsend irsend(IR_LED_PIN);
// IRsend irsend;
const unsigned char myBitmap[] PROGMEM = {
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf1, 0x8f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe1, 0x87, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc4, 0x23, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x8f, 0xf1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x8f, 0xf1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x3f, 0xfc, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x7f, 0xfe, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x7f, 0xfe, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf1, 0xff, 0xff, 0x8f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf1, 0xff, 0xff, 0x8f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe3, 0xff, 0xff, 0xc7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xff, 0xff, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc7, 0xff, 0xff, 0xe3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x87, 0xff, 0xff, 0xe1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x1e, 0x78, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0x13, 0x32, 0x09, 0xf8, 0x78, 0x78, 0xce, 0x18, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0x11, 0x02, 0x08, 0xe0, 0x30, 0x18, 0x8c, 0x08, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0x10, 0x02, 0x38, 0xe2, 0x20, 0x18, 0x84, 0x78, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0x18, 0x02, 0x18, 0xc7, 0xe7, 0x88, 0x04, 0x18, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0x18, 0x06, 0x08, 0xc7, 0xe7, 0x88, 0x04, 0x08, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0x18, 0x06, 0x18, 0xc7, 0xe7, 0x80, 0x04, 0x18, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0x18, 0x06, 0x38, 0xe2, 0x21, 0x10, 0x04, 0x78, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0x18, 0xc6, 0x08, 0x20, 0x30, 0x10, 0x20, 0x08, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0x1c, 0xce, 0x08, 0x30, 0x78, 0x73, 0x26, 0x08, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff
};

void setup() 
{
  Serial.begin(9600);
  dht.begin();
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
  delay(2000);
  display.clearDisplay();
  display.setTextColor(SSD1306_WHITE);
  display.drawBitmap(0, 0, myBitmap, 128, 64, WHITE);
  display.display();
  delay(2000);
  display.clearDisplay();


  // put your setup code here, to run once:
  Serial.begin(9600);
pinMode(A1,OUTPUT); //UltraSonic 1 trig pin
pinMode(A0,INPUT); //UltraSonic 1 echo pin
pinMode(A3,OUTPUT); //UltraSonic 2 trig pin
pinMode(A2,INPUT); //UltraSonic 2 echo pin
pinMode(9,OUTPUT); // buzzer +
pinMode(12,OUTPUT); // buzzer -
pinMode(8,OUTPUT); // Relay +
pinMode(7,OUTPUT); // Relay -
digitalWrite(7,LOW); // relay coil - low
digitalWrite(12,LOW); // buzzer - low
//Serial.begin(115200);
}
int d=90;
int n=0;
int d1,d2;
void s1() //sensor 1
{
   digitalWrite(A1,HIGH);
 delayMicroseconds(2);
 digitalWrite(A1,LOW);
 delayMicroseconds(2);
 d1=pulseIn(A0,HIGH);
 d1=d1/58;
  }

void s2() //sensor 2
{
   digitalWrite(A3,HIGH);
 delayMicroseconds(2);
 digitalWrite(A3,LOW);
 delayMicroseconds(2);
 d2=pulseIn(A2,HIGH);
 d2=d2/58;
  }

#define RAW_DATA_LEN1 350
const uint16_t rawDataOn[RAW_DATA_LEN1]={
	602, 17826, 2970, 9002, 538, 458, 486, 1502, 
	470, 526, 486, 510, 462, 530, 486, 510, 
	466, 530, 466, 530, 466, 530, 462, 1530, 
	482, 514, 482, 514, 462, 1530, 478, 538, 
	438, 558, 538, 1450, 490, 1502, 466, 1522, 
	486, 1506, 486, 1506, 462, 530, 466, 530, 
	466, 530, 466, 530, 466, 530, 462, 538, 
	458, 538, 458, 538, 458, 558, 458, 534, 
	538, 458, 542, 454, 466, 530, 462, 530, 
	466, 530, 486, 510, 486, 510, 486, 510, 
	486, 510, 482, 510, 486, 510, 486, 510, 
	486, 514, 478, 518, 458, 538, 478, 518, 
	478, 538, 458, 534, 542, 454, 514, 482, 
	486, 510, 462, 534, 462, 1526, 486, 1506, 
	486, 1502, 486, 1506, 486, 3010, 2942, 9006, 
	478, 1510, 482, 518, 458, 554, 458, 538, 
	458, 538, 538, 458, 514, 482, 462, 534, 
	462, 530, 486, 1506, 486, 510, 482, 510, 
	466, 1526, 486, 510, 462, 1530, 482, 1510, 
	462, 1534, 454, 1554, 458, 1530, 518, 1474, 
	466, 530, 466, 530, 462, 530, 466, 530, 
	466, 530, 466, 530, 466, 530, 462, 534, 
	462, 534, 462, 534, 462, 534, 462, 534, 
	458, 538, 458, 558, 438, 558, 534, 458, 
	542, 454, 514, 482, 466, 530, 466, 530,
  462, 530, 466, 530, 466, 530, 466, 530, 
	466, 530, 466, 530, 462, 534, 462, 534, 
	462, 534, 462, 534, 462, 534, 458, 558, 
	438, 558, 534, 462, 538, 454, 514, 482, 
	466, 3010, 2962, 9002, 466, 1522, 466, 530, 
	466, 530, 466, 530, 466, 530, 466, 530, 
	462, 534, 462, 534, 462, 534, 462, 1550, 
	438, 558, 438, 558, 538, 1450, 514, 482, 
	466, 1526, 466, 1522, 466, 530, 466, 1526, 
	466, 1522, 466, 1530, 462, 534, 462, 1530, 
	458, 538, 458, 1550, 438, 1554, 514, 482, 
	486, 510, 462, 530, 466, 1526, 466, 1526, 
	462, 1526, 466, 530, 466, 530, 466, 530, 
	462, 534, 462, 538, 458, 534, 462, 1550, 
	438, 1554, 538, 1454, 486, 1502, 466, 530, 
	466, 530, 462, 1526, 466, 1526, 466, 530, 
	462, 534, 462, 534, 462, 534, 462, 534, 
	462, 538, 454, 542, 454, 1554, 538, 1450, 
	542, 1450, 466, 1526, 466, 1000};

#define RAW_DATA_LEN2 234
 const uint16_t rawData17[RAW_DATA_LEN2] = {
  626, 17890, 3046, 8922, 542, 454, 542, 1446,
  546, 450, 518, 478, 542, 454, 542, 454,
  542, 450, 546, 450, 542, 454, 542, 1450,
  514, 482, 538, 458, 538, 1474, 518, 478,
  518, 478, 534, 1454, 542, 1450, 542, 1446,
  546, 1446, 542, 1446, 546, 450, 542, 454,
  542, 454, 542, 454, 542, 458, 534, 458,
  538, 462, 534, 478, 518, 478, 510, 486,
  538, 458, 538, 454, 542, 454, 542, 454,
  542, 454, 542, 450, 546, 450, 542, 454,
  518, 478, 518, 478, 542, 454, 542, 454,
  538, 458, 538, 458, 510, 486, 538, 478,
  514, 482, 534, 458, 538, 458, 542, 454,
  542, 454, 542, 454, 514, 1474, 542, 1450,
  542, 1446, 542, 1450, 542, 2954, 3018, 8926,
  538, 1454, 538, 458, 534, 482, 514, 482,
  534, 458, 542, 454, 542, 454, 538, 458,
  542, 450, 518, 1474, 542, 454, 514, 482,
  542, 1446, 542, 1450, 514, 1478, 538, 1454,
  538, 478, 518, 1474, 534, 1454, 542, 1450,
  542, 454, 542, 1446, 542, 454, 542, 1446,
  542, 1450, 542, 454, 542, 454, 542, 454,
  538, 1458, 534, 1474, 518, 1474, 534, 462,
  538, 454, 542, 454, 542, 454, 542, 450,
  546, 1446, 542, 454, 542, 454, 514, 478,
  542, 1450, 542, 454, 542, 458, 538, 1454,
  534, 1474, 518, 478, 538, 458, 538, 458,
  538, 454, 542, 454, 542, 454, 518, 478,
  542, 1446, 542, 1450, 542, 1446, 542, 1454,
  558, 1000
};

#define RAW_DATA_LEN3 234
 const uint16_t rawData18[RAW_DATA_LEN3] = {
  626, 17890, 3014, 8950, 514, 478, 518, 1474,
  518, 478, 542, 450, 546, 450, 542, 458,
  514, 482, 538, 458, 538, 458, 538, 1474,
  514, 478, 538, 458, 538, 1450, 542, 454,
  542, 454, 542, 1450, 518, 1470, 518, 1474,
  542, 1446, 542, 1454, 538, 458, 538, 458,
  538, 458, 534, 482, 514, 478, 538, 458,
  538, 458, 538, 458, 542, 450, 542, 454,
  542, 454, 542, 454, 542, 454, 542, 450,
  542, 454, 542, 454, 542, 454, 542, 454,
  542, 454, 538, 462, 534, 478, 518, 478,
  490, 506, 538, 458, 542, 450, 518, 478,
  542, 454, 542, 454, 518, 478, 514, 478,
  542, 454, 542, 454, 542, 1450, 542, 1450,
  538, 1454, 538, 1454, 562, 2926, 3042, 8926,
  534, 1458, 538, 454, 542, 454, 542, 454,
  542, 454, 542, 450, 546, 450, 542, 454,
  542, 454, 542, 1446, 542, 458, 538, 458,
  538, 1454, 538, 1474, 514, 1474, 538, 1454,
  538, 458, 538, 1450, 542, 1450, 542, 1446,
  542, 454, 542, 1450, 538, 454, 542, 1454,
  538, 1454, 538, 478, 514, 482, 514, 482,
  534, 1454, 538, 1454, 538, 1450, 542, 454,
  542, 454, 542, 450, 542, 454, 542, 454,
  542, 454, 542, 1450, 538, 458, 538, 458,
  538, 1474, 514, 482, 514, 482, 534, 1454,
  538, 1454, 538, 458, 538, 454, 542, 454,
  542, 454, 542, 454, 542, 454, 538, 454,
  542, 1450, 542, 1450, 538, 1458, 534, 1474,
  542, 1000
};
#define RAW_DATA_LEN4 234
 const uint16_t rawData19[RAW_DATA_LEN4] = {
  630, 17890, 3046, 8926, 438, 554, 538, 1454,
  542, 454, 542, 450, 546, 450, 494, 502,
  490, 506, 490, 502, 518, 478, 494, 1498,
  490, 506, 514, 482, 514, 1478, 486, 514,
  506, 506, 490, 1502, 534, 1454, 542, 1450,
  542, 1446, 518, 1474, 518, 478, 518, 474,
  518, 478, 518, 478, 542, 454, 518, 478,
  542, 454, 514, 482, 514, 486, 510, 502,
  490, 506, 534, 462, 538, 458, 538, 454,
  542, 454, 542, 454, 518, 478, 514, 478,
  518, 478, 518, 478, 542, 454, 518, 478,
  514, 482, 514, 482, 514, 482, 514, 482,
  510, 486, 510, 506, 490, 506, 534, 458,
  538, 458, 538, 458, 542, 1450, 542, 1446,
  518, 1474, 514, 1474, 518, 2978, 3018, 8926,
  514, 1478, 538, 458, 514, 482, 538, 458,
  510, 506, 490, 506, 534, 458, 538, 458,
  542, 454, 542, 1450, 542, 450, 542, 454,
  518, 478, 518, 1470, 542, 1450, 518, 1474,
  538, 462, 534, 1458, 510, 1498, 518, 1474,
  534, 458, 542, 1450, 542, 454, 542, 1446,
  518, 1474, 542, 454, 514, 478, 542, 454,
  518, 1474, 542, 1450, 538, 1462, 530, 478,
  518, 478, 534, 462, 538, 458, 538, 454,
  542, 1450, 542, 1446, 546, 450, 542, 454,
  542, 1450, 542, 450, 542, 454, 542, 1454,
  538, 1454, 534, 482, 514, 478, 518, 478,
  538, 458, 538, 458, 538, 458, 538, 454,
  542, 1450, 542, 1446, 546, 1446, 542, 1450,
  542, 1000
};

#define RAW_DATA_LEN5 234
 const uint16_t rawData20[RAW_DATA_LEN5] = {
  622, 17906, 3042, 8902, 566, 430, 566, 1426,
  562, 434, 562, 454, 542, 454, 542, 450,
  462, 534, 534, 462, 566, 430, 566, 1422,
  570, 426, 570, 426, 566, 1422, 570, 426,
  570, 426, 566, 1426, 566, 1426, 562, 1430,
  562, 1450, 490, 1498, 462, 534, 562, 434,
  566, 426, 570, 426, 570, 426, 570, 426,
  566, 430, 566, 426, 570, 426, 570, 426,
  570, 426, 566, 430, 566, 434, 562, 434,
  586, 426, 542, 454, 542, 454, 462, 534,
  462, 534, 534, 458, 566, 430, 570, 426,
  570, 426, 594, 398, 570, 426, 570, 426,
  570, 426, 566, 430, 566, 430, 566, 430,
  566, 430, 562, 438, 558, 1450, 542, 1450,
  462, 1526, 538, 1454, 566, 2910, 3062, 8898,
  566, 1422, 570, 426, 570, 426, 570, 426,
  594, 402, 566, 430, 566, 430, 566, 430,
  562, 438, 558, 1450, 542, 454, 486, 506,
  466, 1526, 566, 1426, 566, 1422, 570, 1422,
  566, 426, 570, 1422, 566, 1426, 566, 1426,
  566, 430, 562, 1450, 542, 454, 542, 1446,
  486, 1506, 562, 434, 566, 426, 570, 426,
  570, 1422, 566, 1422, 570, 1422, 566, 430,
  566, 430, 566, 430, 566, 434, 562, 434,
  558, 454, 542, 454, 542, 1450, 482, 514,
  534, 1454, 566, 430, 566, 430, 566, 1422,
  570, 1422, 566, 426, 570, 430, 566, 430,
  562, 434, 562, 434, 562, 434, 562, 454,
  538, 1450, 466, 1526, 534, 1454, 566, 1426,
  566, 1000
};
#define RAW_DATA_LEN6 234
 const uint16_t rawData21[RAW_DATA_LEN6] = {
  570, 17938, 3066, 8902, 562, 430, 566, 1426,
  566, 426, 570, 426, 566, 430, 566, 430,
  566, 430, 566, 430, 566, 430, 562, 1430,
  562, 434, 562, 454, 542, 1450, 486, 506,
  462, 534, 482, 1506, 566, 1426, 566, 1426,
  566, 1422, 566, 1426, 566, 430, 566, 430,
  562, 434, 562, 434, 562, 434, 562, 454,
  542, 454, 538, 458, 462, 530, 466, 530,
  538, 458, 566, 430, 566, 426, 570, 426,
  566, 430, 566, 430, 566, 430, 566, 426,
  570, 426, 566, 434, 562, 434, 562, 434,
  562, 434, 562, 454, 538, 454, 566, 430,
  466, 530, 482, 514, 510, 486, 562, 430,
  594, 402, 566, 430, 566, 1422, 570, 1422,
  566, 1426, 566, 1426, 486, 3006, 3042, 8906,
  562, 1450, 538, 454, 542, 454, 462, 534,
  462, 534, 562, 434, 562, 430, 570, 426,
  566, 430, 566, 1426, 590, 402, 566, 430,
  566, 430, 566, 1426, 566, 1426, 562, 1450,
  542, 454, 538, 1454, 462, 1526, 538, 1454,
  566, 426, 566, 1426, 566, 430, 566, 1422,
  566, 1426, 566, 430, 566, 430, 562, 434,
  562, 1434, 558, 1450, 490, 1502, 482, 510,
  510, 486, 566, 430, 566, 426, 570, 426,
  570, 1422, 566, 430, 566, 1422, 566, 430,
  566, 1426, 566, 434, 562, 434, 558, 1450,
  542, 1450, 462, 534, 462, 530, 538, 458,
  566, 430, 566, 430, 566, 430, 566, 426,
  566, 1426, 566, 1422, 570, 1426, 562, 1430,
  506, 1000
};
#define RAW_DATA_LEN7 234
 const uint16_t rawData22[RAW_DATA_LEN7] = {
  570, 17958, 2986, 8986, 538, 454, 466, 1526,
  538, 458, 562, 430, 570, 426, 570, 426,
  566, 430, 566, 430, 566, 426, 570, 1422,
  566, 430, 566, 430, 566, 1426, 562, 438,
  558, 454, 542, 1450, 486, 1502, 486, 1506,
  566, 1422, 570, 1422, 566, 430, 566, 426,
  570, 426, 594, 402, 590, 406, 566, 430,
  566, 430, 566, 434, 558, 438, 558, 454,
  542, 454, 490, 506, 462, 534, 482, 510,
  538, 458, 566, 430, 566, 430, 566, 430,
  566, 426, 570, 426, 566, 430, 566, 430,
  566, 430, 566, 430, 566, 430, 562, 434,
  562, 438, 558, 454, 542, 454, 486, 510,
  462, 530, 486, 510, 538, 1454, 566, 1422,
  570, 1422, 566, 1422, 570, 2926, 3042, 8902,
  590, 1402, 562, 434, 562, 434, 562, 438,
  558, 454, 542, 454, 486, 510, 462, 530,
  486, 510, 566, 1426, 566, 426, 570, 426,
  566, 430, 566, 1426, 566, 1422, 566, 1426,
  566, 434, 562, 1430, 558, 1450, 542, 1450,
  462, 534, 482, 1506, 566, 430, 566, 1422,
  570, 1422, 566, 430, 566, 430, 566, 426,
  570, 1422, 566, 1430, 562, 1430, 558, 454,
  542, 454, 490, 506, 462, 534, 462, 534,
  534, 458, 566, 1426, 566, 1422, 570, 426,
  566, 1426, 566, 430, 566, 430, 562, 1430,
  562, 1430, 562, 434, 558, 458, 538, 454,
  490, 506, 466, 530, 482, 514, 538, 454,
  570, 1422, 566, 1426, 566, 1422, 566, 1426,
  566, 1000
};
#define RAW_DATA_LEN8 234
 const uint16_t rawData23[RAW_DATA_LEN8] = {
  550, 17966, 3038, 8930, 462, 534, 462, 1526,
  566, 430, 566, 430, 566, 430, 566, 426,
  570, 426, 566, 430, 566, 430, 566, 1426,
  566, 430, 562, 434, 562, 1430, 562, 454,
  538, 458, 538, 1450, 462, 1530, 534, 1454,
  570, 1422, 566, 1422, 570, 426, 566, 430,
  566, 430, 566, 430, 566, 430, 562, 434,
  562, 434, 562, 438, 558, 454, 538, 458,
  490, 506, 462, 530, 466, 530, 562, 434,
  566, 430, 590, 402, 570, 426, 566, 430,
  566, 430, 566, 426, 570, 426, 566, 430,
  566, 434, 562, 434, 562, 434, 562, 434,
  558, 458, 538, 454, 542, 454, 466, 530,
  462, 534, 510, 486, 562, 1426, 566, 1426,
  566, 1422, 566, 1426, 566, 2930, 3042, 8902,
  562, 1430, 562, 434, 562, 454, 538, 458,
  538, 454, 466, 530, 466, 530, 486, 510,
  538, 458, 566, 1422, 566, 430, 566, 430,
  566, 1422, 566, 430, 566, 1426, 566, 1426,
  562, 434, 562, 1450, 542, 1450, 486, 1502,
  462, 534, 538, 1454, 566, 426, 566, 1426,
  566, 1422, 566, 430, 566, 430, 566, 430,
  566, 1426, 562, 1434, 558, 1450, 542, 454,
  542, 454, 462, 530, 466, 530, 510, 486,
  566, 1426, 566, 1422, 566, 1426, 566, 426,
  570, 1422, 566, 430, 566, 434, 562, 1430,
  558, 1450, 542, 454, 542, 454, 462, 534,
  462, 530, 510, 486, 566, 430, 566, 430,
  566, 1422, 566, 1426, 566, 1426, 566, 1426,
  562, 1000
};
#define RAW_DATA_LEN9 234
 const uint16_t rawData24[RAW_DATA_LEN9] = {
  550, 17978, 3042, 8902, 566, 430, 562, 1430,
  562, 434, 562, 454, 542, 454, 542, 454,
  462, 530, 466, 530, 486, 510, 566, 1426,
  566, 426, 566, 430, 566, 1426, 566, 426,
  570, 426, 566, 1426, 566, 1426, 562, 1434,
  582, 1426, 542, 1446, 466, 530, 482, 514,
  538, 458, 566, 430, 590, 402, 570, 426,
  566, 430, 566, 430, 566, 426, 570, 426,
  566, 434, 562, 434, 562, 434, 562, 434,
  562, 454, 538, 458, 538, 458, 514, 478,
  466, 530, 486, 510, 534, 462, 562, 430,
  566, 430, 566, 430, 566, 430, 566, 426,
  566, 430, 566, 430, 566, 430, 566, 430,
  566, 434, 558, 438, 558, 1450, 542, 1450,
  462, 1526, 486, 1506, 566, 2910, 3062, 8898,
  566, 1426, 566, 430, 566, 426, 566, 430,
  566, 430, 566, 430, 566, 434, 558, 438,
  558, 438, 558, 1450, 542, 454, 514, 482,
  462, 1526, 538, 1454, 566, 1422, 570, 1422,
  566, 430, 566, 1422, 566, 1426, 566, 1430,
  558, 438, 558, 1454, 538, 454, 542, 1450,
  462, 1526, 538, 458, 538, 458, 566, 430,
  566, 1422, 566, 1426, 566, 1422, 566, 430,
  566, 434, 562, 434, 562, 434, 558, 438,
  558, 458, 538, 458, 538, 454, 466, 1526,
  486, 1502, 566, 430, 566, 430, 566, 1422,
  566, 1426, 566, 430, 566, 430, 562, 434,
  562, 434, 562, 434, 562, 438, 558, 454,
  538, 1454, 514, 1474, 466, 1526, 538, 1450,
  566, 1000
};
#define RAW_DATA_LEN10 234
 const uint16_t rawData25[RAW_DATA_LEN10] = {
  550, 17958, 3066, 8902, 534, 458, 538, 1454,
  566, 426, 566, 430, 566, 430, 566, 430,
  566, 426, 570, 426, 566, 430, 566, 1430,
  562, 434, 558, 438, 558, 1450, 542, 454,
  490, 506, 462, 1526, 538, 1454, 566, 1422,
  594, 1402, 562, 1426, 566, 426, 566, 430,
  566, 434, 562, 434, 562, 434, 558, 438,
  558, 458, 538, 458, 538, 458, 462, 530,
  462, 534, 510, 486, 562, 430, 570, 426,
  566, 430, 566, 430, 566, 430, 562, 430,
  566, 430, 566, 430, 566, 430, 566, 430,
  562, 438, 558, 438, 558, 454, 542, 454,
  542, 454, 462, 534, 462, 534, 510, 482,
  538, 458, 566, 430, 566, 1422, 566, 1426,
  566, 1426, 566, 1426, 562, 2930, 3042, 8906,
  558, 1454, 538, 454, 542, 454, 490, 506,
  462, 534, 482, 510, 510, 486, 566, 430,
  566, 430, 566, 1422, 566, 430, 566, 430,
  566, 430, 566, 1426, 562, 1430, 562, 1434,
  554, 458, 538, 1450, 466, 1526, 462, 1526,
  566, 430, 566, 1426, 566, 430, 566, 1422,
  566, 1426, 566, 430, 562, 434, 562, 434,
  562, 1430, 562, 1450, 538, 1450, 466, 530,
  466, 530, 510, 486, 538, 454, 566, 430,
  566, 1426, 566, 430, 562, 430, 566, 1426,
  566, 1426, 562, 434, 562, 438, 558, 1450,
  542, 1450, 490, 506, 462, 530, 466, 530,
  486, 510, 566, 430, 566, 430, 562, 430,
  566, 1426, 566, 1422, 566, 1426, 566, 1430,
  486, 1000
};
#define RAW_DATA_LEN11 234
 const uint16_t rawData26[RAW_DATA_LEN11] = {
  550, 17978, 3042, 8902, 562, 434, 562, 1430,
  562, 434, 558, 458, 538, 458, 538, 458,
  486, 510, 462, 530, 482, 514, 510, 1482,
  562, 430, 566, 430, 566, 1426, 566, 430,
  562, 430, 566, 1426, 566, 1426, 562, 1434,
  558, 1450, 542, 1450, 462, 530, 466, 530,
  486, 510, 538, 458, 566, 430, 562, 430,
  566, 430, 566, 430, 566, 430, 562, 434,
  562, 434, 562, 434, 562, 434, 562, 434,
  558, 458, 538, 458, 538, 458, 538, 454,
  466, 530, 466, 530, 510, 486, 562, 430,
  566, 430, 566, 430, 566, 430, 562, 434,
  562, 430, 566, 430, 566, 430, 566, 434,
  558, 438, 558, 438, 558, 1450, 538, 1454,
  466, 1522, 466, 1526, 566, 2910, 3058, 8906,
  566, 1422, 566, 430, 562, 434, 562, 430,
  566, 434, 562, 430, 566, 434, 558, 438,
  558, 438, 558, 1450, 542, 454, 542, 454,
  466, 530, 462, 1526, 538, 1454, 566, 1422,
  566, 430, 566, 1426, 562, 1430, 562, 1430,
  562, 434, 558, 1434, 558, 458, 538, 1450,
  514, 1478, 462, 534, 482, 510, 538, 458,
  566, 1426, 562, 1426, 566, 1426, 562, 434,
  562, 434, 562, 434, 562, 434, 558, 438,
  558, 438, 558, 1454, 538, 454, 466, 1526,
  462, 1530, 562, 430, 566, 430, 566, 1426,
  562, 1426, 566, 430, 562, 434, 562, 434,
  562, 434, 562, 438, 558, 438, 554, 458,
  538, 1454, 514, 1478, 462, 1526, 538, 1454,
  562, 1000
};

#define RAW_DATA_LEN12 350
 const uint16_t rawDataOff[RAW_DATA_LEN12] = {
  550, 17882, 2966, 9002, 538, 458, 538, 1450,
  466, 530, 462, 534, 538, 458, 562, 430,
  566, 430, 566, 430, 566, 430, 562, 1426,
  566, 430, 566, 430, 562, 1434, 558, 1434,
  558, 454, 538, 1454, 490, 1498, 466, 1526,
  538, 1450, 566, 1426, 566, 430, 562, 434,
  562, 430, 566, 430, 566, 434, 558, 438,
  558, 438, 558, 438, 558, 458, 534, 458,
  538, 458, 542, 454, 466, 530, 462, 534,
  482, 510, 538, 458, 566, 430, 562, 434,
  562, 430, 566, 430, 538, 458, 538, 458,
  538, 458, 538, 458, 534, 462, 534, 462,
  534, 482, 514, 482, 538, 458, 542, 454,
  462, 530, 466, 530, 486, 510, 538, 458,
  538, 1450, 538, 1454, 538, 2958, 2986, 8954,
  538, 1454, 534, 462, 534, 466, 530, 466,
  530, 482, 486, 510, 486, 510, 542, 458,
  458, 534, 462, 1526, 486, 510, 538, 458,
  510, 1478, 538, 458, 510, 1482, 534, 1458,
  506, 1486, 530, 1462, 506, 1502, 514, 1478,
  490, 506, 462, 534, 462, 530, 466, 530,
  538, 458, 510, 486, 510, 482, 514, 482,
  510, 486, 510, 486, 510, 486, 510, 486,
  506, 490, 506, 490, 506, 490, 506, 510,
  486, 510, 538, 458, 514, 478, 466, 530,
  466, 530, 486, 510, 510, 482, 490, 506,
  514, 482, 510, 486, 510, 486, 486, 510,
  486, 510, 506, 490, 482, 514, 482, 514,
  506, 490, 482, 534, 458, 538, 538, 454,
  490, 2982, 3010, 8958, 462, 1526, 514, 482,
  510, 486, 510, 486, 510, 482, 514, 482,
  510, 486, 510, 486, 510, 486, 510, 1482,
  506, 494, 502, 510, 486, 1506, 538, 1450,
  466, 1526, 466, 1522, 542, 454, 514, 1478,
  510, 1478, 514, 1478, 510, 486, 510, 1482,
  534, 462, 506, 1490, 502, 1506, 538, 458,
  538, 454, 466, 530, 470, 1522, 510, 1478,
  538, 1454, 538, 458, 534, 458, 514, 482,
  538, 458, 510, 486, 534, 466, 506, 1486,
  502, 1506, 510, 1482, 514, 1474, 466, 530,
  486, 510, 486, 1506, 534, 1454, 538, 458,
  510, 486, 510, 486, 510, 486, 510, 486,
  506, 490, 506, 490, 506, 490, 506, 510,
  510, 1478, 542, 1450, 538, 1000
};




int AC_Temp;
int Pev_value;
boolean AC = false;
void loop() {
  // put your main code here, to run repeatedly:
  Serial.println(n);
s1();
s2();
if(d1<d)
  {while(d1<d)
  {s1();}
    while(d2>d)
  {s2();}
  while(d2<d)
  {s2();}
  n=n+1; }
  if(d2<d)
  {while(d2<d)
  {s2();}
  while(d1>d)
  {s1();}
  while(d1<d)
  {s1();}
  n=n-1;}
  if(n<=0)
  {n=0;
  digitalWrite(8,HIGH);}
  if(n>0)
{digitalWrite(8,LOW);}
//Serial.println(n);

  
  delay(2000);
  int t = dht.readTemperature();
  int h = dht.readHumidity();
  if (isnan(h) || isnan(t)) {
    Serial.println("Failed to read from DHT sensor!");
  }
  //o/p in serial monitor
  Serial.println("Temperature:");
  Serial.println(t);
  Serial.println("°C");

  Serial.println("Humidity"); 
  Serial.println(h);
  Serial.println("%");

  Serial.println("AC Temp:");
  Serial.println(AC_Temp);
  Serial.println("°C");

  //o/p in OLED
   display.setTextSize(2);
  display.setCursor(0, 0);
  display.print("Temp:");
  display.print(t);
  display.println("C");

  
  display.print("Humi:");
  display.print(h);
  display.println("%");

 
  display.print("ACTemp:");
  display.print(AC_Temp);
  display.println("C");

  display.display();
  delay(500);
  display.clearDisplay();



  if (t >= 27 && AC == false) {
    irsend.sendRaw(rawDataOn, RAW_DATA_LEN1, 36);   
    Serial.println(F("AC Switched On"));
    AC_Temp = 17;
    AC = true;delay(2000);
  }
  if (t <= 17 && AC == true) {
    irsend.sendRaw(rawDataOff, RAW_DATA_LEN12, 36);   
    Serial.println(F("AC Switched off"));
    AC_Temp = 0;
    AC = false;delay(2000);
  }
  if (t != Pev_value) {
    if (t==28 || t==29 || t==30 || t==31 ||t==32||t>=33)
    {irsend.sendRaw(rawData17, RAW_DATA_LEN3, 36);   
      Serial.println(F("AC Set to 17"));
      AC_Temp= 17;
      AC = true;
      delay(2000);}
    if (t == 27) {
      irsend.sendRaw(rawData18, RAW_DATA_LEN3, 36);   
      Serial.println(F("AC Set to 18"));
      AC_Temp = 18;
      AC = true;delay(2000);
    }
    if (t == 26 || t == 25) {
      irsend.sendRaw(rawData19, RAW_DATA_LEN4, 36);   
      Serial.println(F("AC Set to 19"));
      AC_Temp = 19;
      AC = true;delay(2000);
    }
    if (t == 24) {
      irsend.sendRaw(rawData20, RAW_DATA_LEN5, 36);   
      Serial.println(F("AC Switched 20"));
      AC_Temp = 20;
      AC = true;delay(2000);
    }
    if (t == 23) {
      irsend.sendRaw(rawData21, RAW_DATA_LEN6, 36);   
      Serial.println(F("AC Switched 21"));
      AC_Temp = 21;
      AC = true;delay(2000);
    }
    if (t == 22) {
      irsend.sendRaw(rawData22, RAW_DATA_LEN7, 36);   
      Serial.println(F("AC Switched 22"));
      AC_Temp = 22;
      AC = true;delay(2000);
    }
    if (t == 20) {
      irsend.sendRaw(rawData24, RAW_DATA_LEN9, 36);   
      Serial.println(F("AC Switched 24"));
      AC_Temp = 24;
      AC = true;delay(2000);
    }
    if (t == 19) {
      irsend.sendRaw(rawData25, RAW_DATA_LEN10, 36);   
      Serial.println(F("AC Switched 25"));
      AC_Temp = 25;
      AC = true;delay(2000);
    }
    delay(2000);
  }
  Pev_value = t;
}